{"version":3,"sources":["APIClient.js","Storage.js","Panel.js","Decorations/LoadingAnimation.js","App.js","index.js"],"names":["Log","console","log","Fetch","url","init","headers","fetch","APIRequestBatch","message","a","method","body","JSON","stringify","http_response","ok","error","Error","json","json_response","result","status","APIRequest","id","params","is_batch_request","APIClient","sessionId","undefined","EditCharacter","name","desc","line","description","starting_line","EditPlayer","ChangeMood","new_mood","mood","TriggerEvent","event_desc","attitude","RequestReply","user_message","SendRequests","requests","CreateUserSession","GetUserSession","Storage","loadSuccess","npcList","npcData","AssertLoaded","LoadData","then","resp","res","NPCList","GetNPC","App","props","changeCharacterHandler","event","changeCharacter","target","char","preventDefault","setCharByName","setBlankCharacter","textInputHandler","x","v","value","descriptionLock","setState","changeEventReaction","e","EventReaction","bindHandlers","state","getInitialState","api_lock","this","bind","changeMoodHandler","triggerPresetEvent","triggerCustomEvent","triggerEventHandler","sendHandler","resetHandler","flowersEventHandler","carCrashEventHandler","disrespectEventHandler","CharDesc","CharName","CharStartLine","CharMood","PlayerName","PlayerDesc","ChatInput","EventDescInput","ChatHistory","CharChanged","PlayerChanged","MoodChanged","data","setChar","ChatChrono","to","changeMood","triggerEvent","text","split","map","i","key","entry","type","from","prevState","concat","reply","createChatEntry","parseReply","request","messages","parseEvent","GetReplyFromCharacter","new_history","emptyCharacteristics","push","getPlayerMessage","clearChatInput","elem","renderChatEntry","join","displayWithNewlines","chatHistory","renderChatHistory","presetEventHandler","className","onClick","onChange","placeholder","style","overflow","React","Component","LoadingAnimation","initState","loaded","initFetch","content","session","Promise","all","values","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c49916bd.chunk.js","sourcesContent":["const baseUrl = \"https://r4xp4nhmja.execute-api.eu-west-2.amazonaws.com/default\";\n\nconst DoLogs = true\nconst OfflineMode = false\n\nfunction Log(...args) {\n    if (DoLogs) {\n        console.log(...args)\n    }\n}\n\nconst Fetch = function(url, init) {\n    let headers\n\n    if (init) {\n        if (init.headers) {\n            headers = init.headers\n        } else {\n            headers = {}\n        }\n    } else {\n        headers = {}\n    }\n\n    return fetch(`${baseUrl}${url}`, { ...init, headers })\n}\n\nconst APIRequestBatch = async function(message) {\n    Log(message)\n\n    const http_response = await Fetch(\"\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"Application/json\"\n        },\n        body: JSON.stringify(message)\n    })\n\n    if (!http_response.ok) {\n        console.error(http_response)\n        throw Error(\"APIRequestBatch failed\")\n    }\n\n    const json_response = await http_response.json()\n\n    Log(\"Response:\", json_response)\n\n    const { result, status } = json_response\n\n    if (status !== \"ok\") {\n        console.error(result)\n        throw Error(\"API returned status fail\")\n    }\n\n    return result\n}\n\nconst APIRequest = async function(method, id, params) {\n    let is_batch_request = \"false\"\n    let message = JSON.stringify({ \n        method, id, params, is_batch_request\n    })\n\n    const http_response = await Fetch(\"\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"Application/json\"\n        },\n        body: message\n    })\n\n    Log(\"APIReqeust (single) message:\")\n    Log(message)\n\n    if (!http_response.ok) {\n        throw Error(\"APIRequest: Couldn't get '\" + method + \"' response\")\n    }\n\n    const json_response = await http_response.json()\n\n    Log(\"Response:\", json_response)\n\n    const { result, status } = json_response\n\n    if (status !== \"ok\") {\n        throw Error(\"APIRequest: '\" + method + \"' request failed\")\n    }\n\n    return result\n}\n\nconst APIClient = (function() {\n    var sessionId = undefined\n\n    return {\n        EditCharacter: function(name, desc, line) {\n            let params = {description: desc, name: name, starting_line: line}\n            return { method: \"edit_character\" , params: params }\n        },\n\n        EditPlayer: function(name, desc) {\n            let params = {description: desc, name: name}\n            return { method: \"edit_player\", params: params }\n        },  \n\n        ChangeMood: function(new_mood) {\n            let params = {mood: new_mood}\n            return { method: \"change_mood\", params: params }\n        },\n\n        TriggerEvent: function(event_desc, attitude) {\n            let params = {description: event_desc, attitude: attitude}\n            return { method: \"trigger_event\", params: params }\n        },\n\n        RequestReply: function(user_message) {\n            let params = {user_message: user_message}\n            return { method: \"request_reply\", params: params }\n        },\n\n        SendRequests: function(id, requests) {\n            let message = {\n                id: id,\n                is_batch_request: \"true\",\n                requests: requests\n            }\n\n            return APIRequestBatch(message)\n        },\n\n        CreateUserSession: async function() {\n            if (OfflineMode) {\n                sessionId = 1\n                return\n            }\n\n            let params = {}\n            let result = await APIRequest(\"create_user_session\", params)\n\n            if (!result) {\n                throw Error(\"Loading session failed!\")\n            }\n\n            sessionId = result\n        },\n\n        GetUserSession: function() {\n            const id = sessionId\n\n            if (!id) {\n                throw Error(\"Has no session\")\n            }\n\n            return id\n        }\n    }\n})()\n\nexport default APIClient","const Storage = (function() {\n    var loadSuccess = false\n    const npcPath = \"npcs.json\"\n    const doLogs = false\n\n    function Log(...args) {\n        if (doLogs) {\n            console.log(...args)\n        }\n    }\n\n    let npcList = null\n    let npcData = null\n\n    function AssertLoaded() {\n        if (!loadSuccess) {\n            throw Error(\"Not loaded!\")\n        }\n    }\n\n    return {\n        LoadData: function() {\n            if (loadSuccess) {\n                return\n            }\n\n            const promise = fetch(npcPath, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(resp => {\n                return resp.json()\n            }).then((res) => { \n                Log(\"NPC file\")\n                Log(res)\n\n                npcList = res[\"list\"]\n                npcData = res[\"npcs\"]\n\n                loadSuccess = true\n            })\n    \n            return promise\n        },\n\n        NPCList: function() {\n            AssertLoaded()\n            const result = npcList\n\n            if (!result) {\n                throw Error(\"Couldn't load character list\")\n            }\n\n            return result\n        },\n\n        GetNPC: function(name) {\n            AssertLoaded()\n            const result = npcData[name]\n\n            if (!result) {\n                throw Error(\"Couldn't find character '\" + name + \"'\")\n            }\n            return result\n        }\n    }\n})()\n\nexport default Storage","import React from 'react';\nimport APIClient from './APIClient.js'\nimport Storage from './Storage.js'\n\nimport './Panel.css';\nimport './Figma.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.bindHandlers()\n    this.state = this.getInitialState()\n    this.api_lock = false\n\n    this.descriptionLock = false\n  }\n\n  bindHandlers() {\n    this.changeCharacterHandler = this.changeCharacterHandler.bind(this)\n    this.changeMoodHandler = this.changeMoodHandler.bind(this)\n    this.triggerPresetEvent = this.triggerPresetEvent.bind(this)\n    this.textInputHandler = this.textInputHandler.bind(this)\n    this.triggerCustomEvent = this.triggerCustomEvent.bind(this)\n    this.triggerEventHandler = this.triggerEventHandler.bind(this)\n    this.sendHandler = this.sendHandler.bind(this)\n    this.resetHandler = this.resetHandler.bind(this)\n    this.flowersEventHandler = this.flowersEventHandler.bind(this)\n    this.carCrashEventHandler = this.carCrashEventHandler.bind(this)\n    this.disrespectEventHandler = this.disrespectEventHandler.bind(this)\n    this.changeCharacter = this.changeCharacter.bind(this)\n  }\n\n  getInitialState() {\n    return {\n      id: APIClient.GetUserSession(),\n      CharDesc: \"\",\n      CharName: \"\",\n      CharStartLine: \"\",\n      CharMood: \"neutral\",\n      PlayerName: \"You\",\n      PlayerDesc: \"\",\n      ChatInput: \"\",\n      EventDescInput: \"\",\n      EventReaction: \"none\",\n      ChatHistory: [],\n      CharChanged: true,\n      PlayerChanged: true,\n      MoodChanged: true\n    }\n  }\n\n  emptyCharacteristics() {\n    return this.state.CharName === \"\" || this.state.PlayerName === \"\" || this.state.CharDesc === \"\" || this.state.ChatInput === \"\"\n  }\n\n  setCharByName(name) {\n    this.descriptionLock = false\n    let data = Storage.GetNPC(name)\n    this.setChar(data.name, data.description, data.line)\n  }\n\n  setChar(name, desc, line) {\n    this.setState({\n      CharDesc: desc,\n      CharName: name,\n      CharStartLine: line,\n      ChatChrono: desc + \"\\n\" + name + \": \\\"\" +  line + \"\\\"\"\n    })\n  }\n\n  setBlankCharacter(event) {\n    this.setState(this.getInitialState())\n  }\n\n  changeCharacterHandler = (event) => {\n    this.changeCharacter(event.target.id, event)\n  }\n\n  changeCharacter = (char, event) => {\n    event.preventDefault()\n    var x = char\n    switch (x) {\n      case 'TrevorButton':\n        this.setCharByName(\"trevor\")\n        break\n      case 'LandaButton':\n        this.setCharByName(\"landa\")\n        break\n      case 'CourtneyButton':\n        this.setCharByName(\"courtney\")\n        break\n      case 'CustomButton':\n        this.setBlankCharacter()\n        break\n      default: \n        console.error(\"Error in changeCharacterHandler\")\n    }\n  }\n\n  changeMoodHandler(to, event) {\n    event.preventDefault()\n\n    console.log(to)\n\n    switch (to) {\n      case 'neutral':\n        this.changeMood(\"neutral\")\n        break\n      case 'joy':\n        this.changeMood(\"joy\")\n        break\n      case 'envy':\n        this.changeMood(\"envy\")\n        break\n      case 'fear':\n        this.changeMood(\"fear\")\n        break\n      default: \n        console.error(\"Error in changeMood\")\n    }\n  }\n\n  triggerPresetEvent(x) {\n    console.log(x)\n\n    switch (x) {\n      case 'FlowersEvent':\n      case 'CarCrashEvent':\n      case 'DisrespectEvent':\n        console.log(x);\n        break\n      default: \n        console.error(\"Error in presetEventHandler\")\n    }\n  }\n\n  flowersEventHandler(event) {\n    event.preventDefault()\n    this.triggerPresetEvent(\"FlowersEvent\")\n  }\n\n  disrespectEventHandler(event) {\n    event.preventDefault()\n    this.triggerPresetEvent(\"DisrespectEvent\")\n  }\n\n  carCrashEventHandler(event) {\n    event.preventDefault()\n    this.triggerPresetEvent(\"CarCrashEvent\")\n  }\n\n  textInputHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    var v = event.target.value\n    switch (x) {\n      case 'CharName':\n      case 'CharStartLine':\n      case 'CharDesc':\n      case 'PlayerName':\n      case 'PlayerDesc':\n        if (this.descriptionLock) {\n          // return\n        }\n        break\n      case 'EventDescInput':\n      case 'ChatInput':\n        break\n      default:\n        console.error(\"Error in textInputHandler\")\n        return\n    }\n\n    console.log(x, v)\n\n    this.setState({[x]: v})\n  }\n\n  changeEventReaction = e => {\n    e.preventDefault()\n    var v = e.target.value\n    console.log(v)\n    this.setState({EventReaction: v})\n  }\n\n  triggerCustomEvent(event) {\n    event.preventDefault()\n    console.log(\"custom event\")\n\n    this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n\n    this.setState({\n      EventDescInput: \"Describe event here\",\n      EventReaction: \"none\",\n    })\n  }\n\n  displayWithNewlines(text) {\n    return text.split(\"\\n\").map((i,key) => {\n      return <div key={key}>{i}</div>;\n    })\n  }\n\n  clearChatInput() {\n    this.setState({ ChatInput: \"\" })\n  }\n\n  renderChatEntry(entry) {\n    var result = \"\"\n\n    if (entry.type === \"notification\") {\n      result = entry.text + \"\\n\"\n    } else if (entry.type === \"message\") {\n      var from = \"\"\n      if (entry.from === \"user\") {\n        from = this.state.PlayerName\n      } else if (entry.from === \"char\") {\n        from = this.state.CharName\n      } else {\n        console.error(\"Couldn't resolve line source: \")\n        console.error(entry)\n        console.error(\"-----------------------------\")\n      }\n      result = from + \": \\\"\" + entry.text + \"\\\".\\n\"\n    } else {\n      console.error(\"Wrong entry type\")\n    }\n\n    return result\n  }\n\n  createChatEntry(text, type, from) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: text,\n        type: type,\n        from: from\n      }])\n\n      return { ChatHistory: new_history }\n    })\n  }\n\n  parseReply(reply, from) {\n    this.createChatEntry(reply, \"message\", from)\n  }\n\n  parseEvent(reply) {\n    this.createChatEntry(reply, \"notification\", \"char\")\n  }\n\n  async triggerEventHandler(event) {\n    event.preventDefault()\n\n    const reply = await this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n    this.parseReply(reply)\n  }\n\n  async triggerEvent(desc, attitude) {\n    console.log(\"Triggering event\")\n\n    let request = APIClient.TriggerEvent(desc, attitude)\n    let messages = [request]\n\n    let reply = await APIClient.SendRequests(this.state.id, messages)\n\n    this.parseEvent(reply)\n  }\n\n  async GetReplyFromCharacter(text, name) {\n    try {\n      let reply = await APIClient.GetReplyFromCharacter(this.state.id, text, name)\n      return reply\n    } catch (e) {\n      console.error(e)\n    }\n\n    return null\n  }\n\n  getPlayerMessage() {\n    return this.state.ChatInput\n  }\n\n  notifyNewMood(new_mood) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: prevState.CharName + \"'s mood changed to \" + new_mood,\n        type: \"notification\"\n      }])\n\n      return { \n        CharMood: new_mood,\n        ChatHistory: new_history \n      }\n    })\n  }\n  \n  async changeMood(new_mood) {\n    let result = null\n\n    try {\n      result = await APIClient.ChangeMood(this.state.id, new_mood)\n    } catch (e) {\n      console.error(\"changeMood: error in APIClient.ChangeMood: \", e)\n      result = null\n    }\n\n    return result\n  }\n\n  resetHandler(event) {\n\n  }\n\n  async sendHandler(event) {\n    event.preventDefault()\n\n    if (this.emptyCharacteristics()) {\n      console.error(\"Empty characteristics, couldn't send messages\")\n      return\n    }\n\n    let messages = []\n    if (this.state.CharChanged) {\n      messages.push(APIClient.EditCharacter(this.state.CharName, this.state.CharDesc, this.state.CharStartLine))\n    }\n\n    if (this.state.PlayerChanged) {\n      messages.push(APIClient.EditPlayer(this.state.PlayerName, this.state.PlayerDesc))\n    }\n\n    if (this.state.MoodChanged) {\n      messages.push(APIClient.ChangeMood(this.state.CharMood))\n    }\n\n    const text = this.getPlayerMessage()\n    messages.push(APIClient.RequestReply(text))\n\n    let reply = await APIClient.SendRequests(this.state.id, messages)\n\n    if (!reply) {\n      console.error(\"Failed to get reply\")\n      return\n    }\n\n    // Player's message\n    let message = text\n    this.clearChatInput()\n    this.parseReply(message, \"user\")\n\n    // NPC reply\n    this.parseReply(reply, \"char\")\n\n    this.api_lock = false\n    this.descriptionLock = true\n  }\n\n  chatHistory() {\n    return this.state.CharDesc + \"\\n\" + this.state.PlayerDesc + \"\\n\" + this.state.CharName + \": \" + this.state.CharStartLine + \".\\n\" + this.state.ChatHistory.map(elem => { return this.renderChatEntry(elem) }).join(\"\\n\")\n  }\n\n  renderChatHistory() {\n    if (this.state.CharDesc) {\n      return this.displayWithNewlines(this.chatHistory())\n    }\n    return \"\"\n  }\n\n  renderOld() {\n    <table id=\"demo-window\"><tbody>\n        {/* Character selections */}\n        <tr>\n          <td colSpan=\"3\" className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Select NPC character</h2>\n              <div>\n                <button id=\"TrevorButton\" onClick={this.changeCharacterHandler}>Trevor</button>\n                <button id=\"LandaButton\" onClick={this.changeCharacterHandler}>Hans Landa</button>\n                <button id=\"CourtneyButton\" onClick={this.changeCharacterHandler}>Courtney Williams</button>\n                <button id=\"CustomButton\" onClick={this.changeCharacterHandler}>Custom...</button>\n              </div>\n            </div>\n          </td>\n        </tr>\n\n        {/* Events & mood */}\n        <tr>\n          {/* Mood */}\n          <td className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Moods</h2>\n              <table><tbody>\n                <tr><td><button id=\"NeutralMoodButton\" onClick={this.changeMoodHandler}>Neutral</button></td></tr>\n                <tr><td><button id=\"JoyMoodButton\" onClick={this.changeMoodHandler}>Joy</button></td></tr>\n                <tr><td><button id=\"EnvyMoodButton\" onClick={this.changeMoodHandler}>Envy</button></td></tr>\n                <tr><td><button id=\"FearMoodButton\" onClick={this.changeMoodHandler}>Fear</button></td></tr>\n              </tbody></table>\n            </div>\n          </td>\n\n          {/* Chat */}\n          <td className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Chat</h2>\n              <table className=\"chat-window\"><tbody>\n                {/* Chat window */}\n                <tr>\n                  <td colSpan=\"3\"><div className=\"dialogue-window\">\n                    {this.renderChatHistory()}\n                  </div></td>\n                </tr>\n                <tr>\n                  <td colSpan=\"2\"><input id=\"ChatInput\" onChange={this.textInputHandler} value={this.state.ChatInput} placeholder=\"Type here\"></input></td>\n                  <td><button onClick={this.sendHandler}>Reply</button></td>\n                </tr>\n              </tbody></table>\n            </div>\n          </td>\n\n          {/* Events */}\n          <td className=\"large-cell\">\n            <div className=\"menu-spacer\"><table><tbody>\n              <tr>\n                <td colSpan=\"3\"><h2>Trigger game event</h2></td>\n              </tr>\n              <tr>\n                <td colSpan=\"2\" rowSpan=\"2\"><textarea id=\"EventDescInput\" onChange={this.textInputHandler} value={this.state.EventDescInput}></textarea></td>\n                <td><select onChange={this.changeEventReaction} value={this.state.EventReaction}>\n                  <option value=\"none\">It made them:</option>\n                  <option value=\"angry\">Angry</option>\n                  <option value=\"pleased\">Pleased</option>\n                  <option value=\"scared\">Scared</option>\n                  <option value=\"neutral\">Neutral</option>\n                </select></td>\n              </tr>\n              <tr>\n                <td><button onClick={this.triggerCustomEvent}>Go</button></td>\n              </tr>\n              <tr>\n                <td colSpan=\"3\"><h2>Preset events</h2></td>\n              </tr>\n              <tr>\n                <td><button id=\"FlowersEvent\" onClick={this.presetEventHandler}>Receives flowers</button></td>\n                <td><button id=\"DisrespectEvent\" onClick={this.presetEventHandler}>Show disrespect</button></td>\n                <td><button id=\"CarCrashEvent\" onClick={this.presetEventHandler}>The car crashes nearby</button></td>\n              </tr>\n            </tbody></table></div>\n          </td>\n        </tr>\n\n        {/* Describe character | description */}\n        <tr>\n            <td colSpan=\"3\" className=\"large-cell\">\n              <div className=\"menu-spacer\">\n                <h2>Describe character</h2>\n                <table><tbody>\n                  <tr>\n                    <td>\n                      <div>Name</div>\n                      <input id=\"CharName\" onChange={this.textInputHandler} value={this.state['CharName']} placeholder=\"Name...\"></input>\n                    </td>\n                    <td rowSpan=\"2\">\n                      <div>Description</div>\n                      <textarea id=\"CharDesc\" onChange={this.textInputHandler} value={this.state.CharDesc}></textarea>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <div>Starting line</div>\n                      <textarea id=\"CharStartLine\" onChange={this.textInputHandler} value={this.state.CharStartLine} placeholder=\"Type starting line here...\"></textarea>\n                    </td>\n                  </tr>\n                </tbody></table>\n              </div>\n            </td>\n        </tr>\n\n        {/* Player */}\n        <tr>\n          <td colSpan=\"3\" className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Player's description</h2>\n\n              <h3>Name</h3>\n              <div className=\"menu-input\">\n                <div><input id=\"PlayerName\" onChange={this.textInputHandler} value={this.state.PlayerName} placeholder=\"Your name...\"></input></div>\n              </div>\n\n              <h3>Description (optional)</h3>\n              <div className=\"menu-input\">\n                <div><textarea id=\"PlayerDesc\" onChange={this.textInputHandler} value={this.state.PlayerDesc}></textarea></div>\n              </div>\n            </div>\n          </td>\n        </tr>\n      </tbody></table>\n  }\n\n  render() {\n    return (\n      <div className=\"v8_10\">\n        <div className=\"v8_1\">\n          <div className=\"v6_67\"></div>\n          <button className=\"v23_24\" onClick={this.triggerCustomEvent}>\n            <span className=\"v23_26\">Go</span>\n          </button>\n          <select className=\"v23_27\" onChange={this.changeEventReaction} value={this.state.EventReaction}>\n            <option value=\"none\">It made them:</option>\n            <option value=\"angry\">Angry</option>\n            <option value=\"pleased\">Pleased</option>\n            <option value=\"scared\">Scared</option>\n            <option value=\"neutral\">Neutral</option>\n          </select>\n          <button className=\"v23_2\" onClick={this.carCrashEventHandler}>\n            <span className=\"v23_4\">Car crashes nearby</span>\n          </button>\n          <button className=\"v23_5\" onClick={this.flowersEventHandler}>\n            <span className=\"v23_7\">Receives flowers</span>\n          </button>\n          <button className=\"v23_19\" onClick={this.disrespectEventHandler}>\n            <span className=\"v23_21\">Show disrespect</span>\n          </button>\n          <span className=\"v6_68\">Events</span>\n          <span className=\"v6_71\">Preset events</span>\n          <span className=\"v6_72\">Trigger custom event</span>\n          <textarea className=\"v23_31\" placeholder=\"Describe...\" id=\"EventDescInput\" value={this.state.EventDescInput} onChange={this.textInputHandler}>\n          </textarea>\n        </div>\n        <div className=\"v8_2\">\n          <div className=\"v6_69\"></div>\n          <span className=\"v23_45\">Starting line</span>\n          <span className=\"v23_44\">Description</span>\n          <textarea className=\"v23_35\" placeholder=\"Describe...\" id=\"CharDesc\" value={this.state.CharDesc} onChange={this.textInputHandler}>\n          </textarea>\n          <span className=\"v23_49\">Description</span>\n          <textarea className=\"v23_50\" placeholder=\"Describe...\" id=\"PlayerDesc\" value={this.state.PlayerDesc} onChange={this.textInputHandler}>\n          </textarea>\n          <input className=\"v23_41\" placeholder=\"Name\" id=\"CharName\" value={this.state.CharName} onChange={this.textInputHandler}>\n          </input>\n          <input className=\"v23_46\" placeholder=\"Name\" id=\"PlayerName\" value={this.state.PlayerName} onChange={this.textInputHandler}>\n          </input>\n          <textarea className=\"v23_38\" placeholder=\"Type here...\" id=\"CharStartLine\" value={this.state.CharStartLine} onChange={this.textInputHandler}>\n          </textarea>\n          <span className=\"v6_73\">NPC</span>\n          <span className=\"v6_74\">Player</span>\n          <span className=\"v6_70\">Characteristics</span>\n        </div>\n        <div className=\"v8_9\">\n          <div className=\"v6_53\"></div>\n          <div className=\"v8_7\">\n            <span className=\"v6_54\">Change the mood here</span>\n            <button className=\"v6_55\" id=\"EnvyMoodButton\" onClick={e => this.changeMoodHandler(\"envy\", e)}>\n              <span className=\"v6_57\">Envy</span>\n            </button>\n            <button className=\"v6_58\" id=\"JoyMoodButton\" onClick={e => this.changeMoodHandler(\"joy\", e)}>\n              <span className=\"v6_60\">Joy</span>\n            </button>\n            <button className=\"v6_61\" id=\"NeutralMoodButton\" onClick={e => this.changeMoodHandler(\"neutral\", e)}>\n              <span className=\"v6_63\">Neutral</span>\n            </button>\n          </div>\n          <button className=\"v6_64\" id=\"FearMoodButton\" onClick={e => this.changeMoodHandler(\"fear\", e)}>\n            <span className=\"v6_66\">Fear</span>\n          </button>\n        </div>\n        <div className=\"v8_8\">\n          <div className=\"v6_30\"></div>\n          <div className=\"v23_54\">\n            <span className=\"v6_31\">Select NPC</span>\n            <button className=\"v6_47\" id=\"TrevorButton\" onClick={e => this.changeCharacter(\"TrevorButton\", e)}>\n              <span className=\"v6_38\">Trevor</span>\n            </button>\n            <button className=\"v6_46\" id=\"CourtneyButton\" onClick={e => this.changeCharacter(\"CourtneyButton\", e)}>\n              <span className=\"v6_40\">Courtney</span>\n            </button>\n            <button className=\"v6_48\" id=\"LandaButton\" onClick={e => this.changeCharacter(\"LandaButton\", e)}>\n              <span className=\"v6_39\">Hans Landa</span>\n            </button>\n            <button className=\"v6_49\" id=\"CustomButton\" onClick={e => this.changeCharacter(\"CustomButton\", e)}>\n              <span className=\"v6_51\">Custom...</span>\n            </button>\n          </div>\n        </div>\n        <div className=\"v8_6\">\n          <div className=\"black-square\"></div>\n          <div className=\"v6_26\"></div>\n          <div className=\"v6_43\" style={{overflow: \"scroll\"}}>{this.renderChatHistory()}</div>\n          <div className=\"v6_44\"></div>\n          <textarea className=\"v8_5\" placeholder=\"Type here\" id=\"ChatInput\" value={this.state.ChatInput} onChange={this.textInputHandler}>\n          </textarea>\n          <button className=\"v8_4\" onClick={this.resetHandler}>\n            <span className=\"v6_41\">RESET</span>\n          </button>\n          <button className=\"v8_3\" onClick={this.sendHandler}>\n            <span className=\"v6_42\">REPLY</span>\n          </button>\n          <span className=\"v6_45\">YOU</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react'\n\nimport './LoadingAnimation.css'\n\nfunction LoadingAnimation() {\n    return (\n        <div className=\"loading-container\">\n            <span></span>\n            <span></span>\n            <span></span>\n        </div>\n    )\n}\n\nexport default LoadingAnimation;","import React from 'react';\nimport APIClient from './APIClient'\nimport Storage from './Storage'\n\nimport './App.css';\nimport Panel from './Panel.js'\nimport LoadingAnimation from './Decorations/LoadingAnimation.js'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = this.initState()\n    }\n\n    initState() {\n        return {\n            loaded: false\n        }\n    }\n\n    componentDidMount() {\n        this.initFetch()\n    }\n\n    initFetch() {\n        const content = Storage.LoadData()\n        const session = APIClient.CreateUserSession()\n\n        Promise.all([content, session]).then(values => {\n            this.setState({\n                loaded: true\n            })\n        })\n    }\n\n    loaded() {\n        return this.state.loaded\n    }\n\n    render() {\n        if (!this.loaded()) {\n            return <LoadingAnimation/>\n        }\n\n        return <Panel/>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('body-container')\n);\n\n\n"],"sourceRoot":""}