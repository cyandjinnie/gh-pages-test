{"version":3,"sources":["APIClient.js","App.js","index.js"],"names":["Fetch","url","init","headers","console","log","fetch","APIRequest","method","body","a","http_response","ok","json","json_response","result","status","error","APIClient","NewCharacter","id","desc","JSON","stringify","ChangeMood","new_mood","TriggerEvent","event_desc","attitude","GetReplyFromCharacter","user_message","user_name","CreateUserSession","App","props","changeCharacterHandler","event","preventDefault","target","setTrevor","setLanda","setCourtney","setBlankCharacter","changeMoodHandler","x","changeMood","presetEventHandler","textInputHandler","v","value","setState","changeEventReaction","e","EventReaction","bind","triggerCustomEvent","triggerEventHandler","sendHandler","state","getInitialState","api_lock","CharDesc","CharName","CharStartLine","PlayerName","PlayerDesc","ChatInput","EventDescInput","ChatHistory","name","line","this","ChatChrono","setChar","prevState","concat","text","type","triggerEvent","split","map","i","key","reply","entry","from","parseReply","character_reply","clearChatInput","elem","renderChatEntry","join","displayWithNewlines","chatHistory","colSpan","onClick","className","renderChatHistory","onChange","placeholder","rowSpan","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ad2ae48.chunk.js","sourcesContent":["const baseUrl = \"http://localhost:8000/api/\";\n\nconst Fetch = function(url, init) {\n    let headers\n\n    if (init) {\n        if (init.headers) {\n            headers = init.headers\n        } else {\n            headers = {}\n        }\n    } else {\n        headers = {}\n    }\n\n    console.log(init)\n    console.log(headers)\n\n    return fetch(`${baseUrl}${url}`, { ...init, headers })\n}\n\nconst APIRequest = async function(method, body) {\n    const http_response = await Fetch(method + \"/\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"Application/json\",\n        },\n        body: body\n    })\n\n    if (!http_response.ok) {\n        throw \"Couldn't get '\" + method + \"' response\"\n    }\n\n    const json_response = await http_response.json()\n\n    if (!json_response.ok) {\n        throw \"Error while parsing '\" + method + \"' response\"\n    }\n\n    const { result, status } = json_response\n    if (status !== \"OK\") {\n        console.error(\"Reponse status != OK, query \" + method)\n    }\n\n    return result\n}\n\nconst APIClient = (function() {\n    return {\n        NewCharacter: function(id, desc) {\n            return APIRequest(\"new_character\", JSON.stringify({ id, desc }))\n        },\n\n        ChangeMood: function(id, new_mood) {\n            return APIRequest(\"change_mood\", JSON.stringify({ id, new_mood }))\n        },\n\n        TriggerEvent: function(id, event_desc, attitude) {\n            return APIRequest(\"trigger_event\", JSON.stringify({ id, event_desc, attitude }))\n        },\n\n        GetReplyFromCharacter: function(id, user_message, user_name) {\n            return APIRequest(\"request_reply\", JSON.stringify({ id, user_message, user_name }))\n        },\n\n        CreateUserSession: function() {\n            return APIRequest(\"create_user_session\", \"\")\n        },\n\n        \n    }\n})()\n\nexport default APIClient","import React from 'react';\nimport './App.css';\nimport APIClient from './APIClient.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.changeCharacterHandler = this.changeCharacterHandler.bind(this)\n    this.changeMoodHandler = this.changeMoodHandler.bind(this)\n    this.presetEventHandler = this.presetEventHandler.bind(this)\n    this.textInputHandler = this.textInputHandler.bind(this)\n    this.triggerCustomEvent = this.triggerCustomEvent.bind(this)\n    this.triggerEventHandler = this.triggerEventHandler.bind(this)\n    this.sendHandler = this.sendHandler.bind(this)\n\n    this.setTrevor = this.setTrevor.bind(this)\n    this.setCourtney = this.setCourtney.bind(this)\n    this.setLanda = this.setLanda.bind(this)\n\n    this.state = this.getInitialState()\n\n    this.api_lock = false\n  }\n\n  getInitialState() {\n    return {\n      CharDesc: \"\",\n      CharName: \"\",\n      CharStartLine: \"\",\n      PlayerName: \"You\",\n      PlayerDesc: \"\",\n      ChatInput: \"\",\n      EventDescInput: \"Describe event here\",\n      EventReaction: \"none\",\n      ChatHistory: []\n    }\n  }\n\n  setChar(name, desc, line) {\n    this.setState({\n      CharDesc: desc,\n      CharName: name,\n      CharStartLine: line,\n      ChatChrono: desc + \"\\n\" + name + \": \\\"\" +  line + \"\\\"\"\n    })\n  }\n\n  setCourtney(event) {\n    let desc = \"Courtney is a hot bitchy girl. She has huge tits and round ass. She likes money and sex. Here is her direct messages with You\"\n    let name = \"Courtney\"\n    let line = \"Hi! Nice to see you, sweetie.\"\n\n    this.setChar(name, desc, line)\n  }\n\n  setLanda(event) {\n    let desc = \"Hans Landa is a Colonel in the SS tasked with locating Jews in hiding in Occupied France. He’s fluent in multiple languages, but beneath the educated, polite and even charming veneer is a cruel and sadistic man. While he takes great pride in his work, he acts entirely out of self-interest, as the story demonstrates. This time he is interrogating Marcel who is possibly hiding jews inside his house.\"\n    let name = \"Landa\"\n    let line = \"Hello, mr. Mercel\"\n\n    this.setChar(name, desc, line)\n  }\n\n  setTrevor(event) {\n    let desc = \"Trevor has been described as a difficult person to deal with: extreme, impetuous, vengeful, psychopathic, unhinged, unpredictable, untamed, infamous, homicidal, and prone to violent outbursts and destructive rampages. He does everything in a sociopathic and relentless manner.\"\n    let line = \"This piece of shit that was the cause of my misery, a completely worthless individual\"\n    let name = \"Trevor\"\n\n    this.setChar(name, desc, line)\n  }\n\n  setBlankCharacter(event) {\n    this.setState(this.getInitialState())\n  }\n\n  masterHandler() {\n    // ... todo\n  }\n\n  changeCharacterHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    switch (x) {\n      case 'TrevorButton':\n        this.setTrevor()\n        break\n      case 'LandaButton':\n        this.setLanda()\n        break\n      case 'CourtneyButton':\n        this.setCourtney()\n        break\n      case 'CustomButton':\n        this.setBlankCharacter()\n        break\n      default: \n        console.error(\"Error in changeCharacterHandler\")\n    }\n  }\n\n  changeMood(new_mood) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: prevState.CharName + \"'s mood changed to \" + new_mood,\n        type: \"notification\"\n      }])\n\n      return { ChatHistory: new_history }\n    })\n  }\n\n  changeMoodHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    console.log(x);\n    switch (x) {\n      case 'NeutralMoodButton':\n        this.changeMood(\"neutral\")\n        break\n      case 'JoyMoodButton':\n        this.changeMood(\"joy\")\n        break\n      case 'EnvyMoodButton':\n        this.changeMood(\"envy\")\n        break\n      case 'FearMoodButton':\n        this.changeMood(\"fear\")\n        break\n      default: \n        console.error(\"Error in changeMoodHandler\")\n    }\n  }\n\n  presetEventHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    switch (x) {\n      case 'FlowersEvent':\n      case 'CarCrashEvent':\n      case 'DisrespectEvent':\n        console.log(x);\n        break\n      default: \n        console.error(\"Error in presetEventHandler\")\n    }\n  }\n\n  textInputHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    var v = event.target.value\n    switch (x) {\n      case 'ChatInput':\n      case 'CharName':\n      case 'CharStartLine':\n      case 'CharDesc':\n      case 'PlayerName':\n      case 'PlayerDesc':\n      case 'EventDescInput':\n        console.log(x, v)\n        break\n      default:\n        console.error(\"Error in textInputHandler\")\n    }\n\n    this.setState({[x]: v})\n  }\n\n  changeEventReaction = e => {\n    e.preventDefault()\n    var v = e.target.value\n    console.log(v)\n    this.setState({EventReaction: v})\n  }\n\n  triggerCustomEvent(event) {\n    event.preventDefault()\n    console.log(\"custom event\")\n\n    this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n\n    this.setState({\n      EventDescInput: \"Describe event here\",\n      EventReaction: \"none\",\n    })\n  }\n\n  displayWithNewlines(text) {\n    return text.split(\"\\n\").map((i,key) => {\n      return <div key={key}>{i}</div>;\n    })\n  }\n\n  clearChatInput(reply) {\n    this.setState((state, props) => ({\n      ChatChrono: reply,\n      ChatInput: \"\"\n    }));\n  }\n\n  renderChatEntry(entry) {\n    var result = \"\"\n\n    if (entry.type === \"notification\") {\n      result = entry.text + \"\\n\"\n    } else if (entry.type === \"message\") {\n      var from = \"\"\n      if (entry.from === \"user\") {\n        from = this.state.PlayerName\n      } else if (entry.from === \"char\") {\n        from = this.state.CharName\n      } else {\n        console.error(\"Couldn't resolve line source\")\n      }\n      result = from + \": \\\"\" + entry.text + \"\\\".\\n\"\n    } else {\n      console.error(\"Wrong entry type\")\n    }\n\n    return result\n  }\n\n  parseReply(reply) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: reply,\n        type: \"message\"\n      }])\n\n      return { ChatHistory: new_history }\n    })\n  }\n\n  async triggerEventHandler(event) {\n    event.preventDefault()\n    // This is very very very very bad\n    if (this.api_lock) {\n      return\n    }\n    this.api_lock = true\n\n    const reply = await this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n    this.parseReply(reply)\n\n    this.api_lock = false\n  }\n\n  async triggerEvent(desc, attitude) {\n    console.log(\"Triggering event\")\n\n    let character_reply = await APIClient.TriggerEvent(this.state.id, desc, attitude)\n\n    this.setState((state, props) => ({\n      ChatChrono: character_reply,\n      ChatInput: \"\"\n    }));\n\n    this.api_lock = false\n  }\n\n  async sendHandler(event) {\n    event.preventDefault()\n\n    // This is very very very very bad\n    if (this.api_lock) {\n      return\n    }\n    this.api_lock = true\n\n    console.log(\"Sent\")\n\n    let text = event.target.value\n    let reply = await APIClient.GetReplyFromCharacter(this.state.id, text, this.state.PlayerName)\n\n    this.parseReply(reply)\n    this.clearChatInput()\n\n    this.api_lock = false\n  }\n\n  chatHistory() {\n    return this.state.CharDesc + \"\\n\" + this.state.PlayerDesc + \"\\n\" + this.state.CharName + \": \" + this.state.CharStartLine + \".\\n\" + this.state.ChatHistory.map(elem => { return this.renderChatEntry(elem) }).join(\"\\n\")\n  }\n\n  renderChatHistory() {\n    if (this.state.CharDesc) {\n      return this.displayWithNewlines(this.chatHistory())\n    }\n    return \"\"\n  }\n\n  render() {\n    return (\n      <table id=\"demo-window\"><tbody>\n        {/* Character selections */}\n        <tr>\n          <td colSpan=\"3\">\n            Select NPC character\n            <div>\n              <button id=\"TrevorButton\" onClick={this.changeCharacterHandler}>Trevor</button>\n              <button id=\"LandaButton\" onClick={this.changeCharacterHandler}>Hans Landa</button>\n              <button id=\"CourtneyButton\" onClick={this.changeCharacterHandler}>Courtney Williams</button>\n              <button id=\"CustomButton\" onClick={this.changeCharacterHandler}>Custom...</button>\n            </div>\n          </td>\n        </tr>\n\n        {/* Events & mood */}\n        <tr>\n          <td>\n            <div className=\"menu-widget\">\n              Chat\n              <table className=\"chat-window\"><tbody>\n                {/* Chat window */}\n                <tr>\n                  <td colSpan=\"3\"><div className=\"dialogue-window\">\n                    {this.renderChatHistory()}\n                  </div></td>\n                </tr>\n                <tr>\n                  <td colSpan=\"2\"><input id=\"ChatInput\" onChange={this.textInputHandler} placeholder=\"Type here\"></input></td>\n                  <td><button onClick={this.sendHandler}>Reply</button></td>\n                </tr>\n              </tbody></table>\n            </div>\n          </td>\n          <td>\n            Moods\n            <table><tbody>\n              <tr><td><button id=\"NeutralMoodButton\" onClick={this.changeMoodHandler}>Neutral</button></td></tr>\n              <tr><td><button id=\"JoyMoodButton\" onClick={this.changeMoodHandler}>Joy</button></td></tr>\n              <tr><td><button id=\"EnvyMoodButton\" onClick={this.changeMoodHandler}>Envy</button></td></tr>\n              <tr><td><button id=\"FearMoodButton\" onClick={this.changeMoodHandler}>Fear</button></td></tr>\n            </tbody></table>\n          </td>\n          <td>\n            <div><table><tbody>\n              <tr>\n                <td colSpan=\"3\">Trigger game event</td>\n              </tr>\n              <tr>\n                <td colSpan=\"2\" rowSpan=\"2\"><textarea id=\"EventDescInput\" onChange={this.textInputHandler} value={this.state.EventDescInput}></textarea></td>\n                <td><select onChange={this.changeEventReaction} value={this.state.EventReaction}>\n                  <option value=\"none\">It made them:</option>\n                  <option value=\"angry\">Angry</option>\n                  <option value=\"pleased\">Pleased</option>\n                  <option value=\"scared\">Scared</option>\n                  <option value=\"neutral\">Neutral</option>\n                </select></td>\n              </tr>\n              <tr>\n                <td><button onClick={this.triggerCustomEvent}>Go</button></td>\n              </tr>\n              <tr>\n                <td colSpan=\"3\">Preset events</td>\n              </tr>\n              <tr>\n                <td><button id=\"FlowersEvent\" onClick={this.presetEventHandler}>Receives flowers</button></td>\n                <td><button id=\"DisrespectEvent\" onClick={this.presetEventHandler}>Show disrespect</button></td>\n                <td><button id=\"CarCrashEvent\" onClick={this.presetEventHandler}>The car crashes nearby</button></td>\n              </tr>\n            </tbody></table></div>\n          </td>\n        </tr>\n\n        {/* Describe character | description */}\n        <tr>\n          <td colSpan=\"3\">\n            Describe character\n            <table><tbody>\n              <tr>\n                <td>\n                  <div>Name</div>\n                  <input id=\"CharName\" onChange={this.textInputHandler} value={this.state['CharName']} placeholder=\"Name...\"></input>\n                </td>\n                <td rowSpan=\"2\">\n                  <div>Description</div>\n                  <textarea id=\"CharDesc\" onChange={this.textInputHandler} value={this.state.CharDesc}></textarea>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <div>Starting line</div>\n                  <textarea id=\"CharStartLine\" onChange={this.textInputHandler} value={this.state.CharStartLine} placeholder=\"Type starting line here...\"></textarea>\n                </td>\n              </tr>\n            </tbody></table>\n          </td>\n        </tr>\n\n        {/* Player */}\n        <tr>\n          <td colSpan=\"3\">\n            Player's description\n\n            Name\n            <div className=\"menu-input\">\n              <div><input id=\"PlayerName\" onChange={this.textInputHandler} value={this.state.PlayerName} placeholder=\"Your name...\"></input></div>\n            </div>\n\n            Description (optional)\n            <div className=\"menu-input\">\n              <div><textarea id=\"PlayerDesc\" onChange={this.textInputHandler} value={this.state.PlayerDesc}></textarea></div>\n            </div>\n          </td>\n        </tr>\n      </tbody></table>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('body-container')\n);\n\n\n"],"sourceRoot":""}