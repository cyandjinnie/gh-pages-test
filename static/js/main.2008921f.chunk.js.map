{"version":3,"sources":["APIClient.js","Storage.js","Panel.js","Decorations/LoadingAnimation.js","App.js","index.js"],"names":["Log","console","log","Fetch","url","init","headers","fetch","APIRequestBatch","message","a","method","body","JSON","stringify","http_response","ok","error","Error","json","json_response","result","status","APIRequest","id","params","is_batch_request","APIClient","sessionId","undefined","EditCharacter","name","desc","line","description","starting_line","EditPlayer","ChangeMood","new_mood","mood","TriggerEvent","event_desc","attitude","RequestReply","user_message","Reset","requests","SendRequests","CreateUserSession","GetUserSession","Storage","loadSuccess","npcList","npcData","AssertLoaded","LoadData","then","resp","res","NPCList","GetNPC","App","props","changeCharacterHandler","event","changeCharacter","target","char","preventDefault","setCharByName","setBlankCharacter","textInputHandler","x","v","value","setState","CharChanged","PlayerChanged","changeEventReaction","e","EventReaction","bindHandlers","state","getInitialState","api_lock","descriptionLock","messagesEndRef","React","createRef","this","bind","changeMoodHandler","triggerPresetEvent","triggerCustomEvent","triggerEventHandler","sendHandler","resetHandler","flowersEventHandler","carCrashEventHandler","disrespectEventHandler","entryToBubble","current","scrollIntoView","behavior","scrollToBottom","CharDesc","CharName","CharStartLine","CharMood","PlayerName","PlayerDesc","ChatInput","EventDescInput","ChatHistory","MoodChanged","data","setChar","prev_state","ChatChrono","changeMood","preset_events","FlowersEvent","CarCrashEvent","DisrespectEvent","triggerEvent","text","split","map","i","key","entry","type","from","prevState","concat","reply","createChatEntry","parseReply","parseEvent","createPreliminaryRequests","push","notifySavedChanges","GetReplyFromCharacter","new_history","messages","emptyCharacteristics","getPlayerMessage","clearChatInput","elem","renderChatEntry","join","displayWithNewlines","chatHistory","renderChatHistory","presetEventHandler","className","startingLineBubble","onClick","onChange","placeholder","dialogueBubbles","ref","Component","LoadingAnimation","initState","loaded","initFetch","content","session","Promise","all","values","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2008921f.chunk.js","sourcesContent":["const baseUrl = \"https://r4xp4nhmja.execute-api.eu-west-2.amazonaws.com/default\";\n\nconst DoLogs = true\nconst OfflineMode = false\n\nfunction Log(...args) {\n    if (DoLogs) {\n        console.log(...args)\n    }\n}\n\nconst Fetch = function(url, init) {\n    let headers\n\n    if (init) {\n        if (init.headers) {\n            headers = init.headers\n        } else {\n            headers = {}\n        }\n    } else {\n        headers = {}\n    }\n\n    return fetch(`${baseUrl}${url}`, { ...init, headers })\n}\n\nconst APIRequestBatch = async function(message) {\n    Log(message)\n\n    const http_response = await Fetch(\"\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"Application/json\"\n        },\n        body: JSON.stringify(message)\n    })\n\n    if (!http_response.ok) {\n        console.error(http_response)\n        throw Error(\"APIRequestBatch failed\")\n    }\n\n    const json_response = await http_response.json()\n\n    Log(\"Response:\", json_response)\n\n    const { result, status } = json_response\n\n    if (status !== \"ok\") {\n        console.error(result)\n        throw Error(\"API returned status fail\")\n    }\n\n    return result\n}\n\nconst APIRequest = async function(method, id, params) {\n    let is_batch_request = \"false\"\n    let message = JSON.stringify({ \n        method, id, params, is_batch_request\n    })\n\n    const http_response = await Fetch(\"\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"Application/json\"\n        },\n        body: message\n    })\n\n    Log(\"APIReqeust (single) message:\")\n    Log(message)\n\n    if (!http_response.ok) {\n        throw Error(\"APIRequest: Couldn't get '\" + method + \"' response\")\n    }\n\n    const json_response = await http_response.json()\n\n    Log(\"Response:\", json_response)\n\n    const { result, status } = json_response\n\n    if (status !== \"ok\") {\n        throw Error(\"APIRequest: '\" + method + \"' request failed\")\n    }\n\n    return result\n}\n\nconst APIClient = (function() {\n    var sessionId = undefined\n\n    return {\n        EditCharacter: function(name, desc, line) {\n            let params = {description: desc, name: name, starting_line: line}\n            return { method: \"edit_character\" , params: params }\n        },\n\n        EditPlayer: function(name, desc) {\n            let params = {description: desc, name: name}\n            return { method: \"edit_user\", params: params }\n        },  \n\n        ChangeMood: function(new_mood) {\n            let params = {mood: new_mood}\n            return { method: \"change_mood\", params: params }\n        },\n\n        TriggerEvent: function(event_desc, attitude) {\n            let params = {description: event_desc, attitude: attitude}\n            return { method: \"trigger_event\", params: params }\n        },\n\n        RequestReply: function(user_message) {\n            let params = {user_message: user_message}\n            return { method: \"request_reply\", params: params }\n        },\n\n        Reset: function(id) {\n            let message = {\n                id: id,\n                is_batch_request: \"true\",\n                requests: [\n                    {\n                        method: \"reset_event\",\n                        params: []\n                    }\n                ]\n            }\n\n            return APIRequestBatch(message)\n        },\n\n        SendRequests: function(id, requests) {\n            let message = {\n                id: id,\n                is_batch_request: \"true\",\n                requests: requests\n            }\n\n            return APIRequestBatch(message)\n        },\n\n        CreateUserSession: async function() {\n            if (OfflineMode) {\n                sessionId = 1\n                return\n            }\n\n            let params = {}\n            let result = await APIRequest(\"create_user_session\", params)\n\n            if (!result) {\n                throw Error(\"Loading session failed!\")\n            }\n\n            sessionId = result\n        },\n\n        GetUserSession: function() {\n            const id = sessionId\n\n            if (!id) {\n                throw Error(\"Has no session\")\n            }\n\n            return id\n        }\n    }\n})()\n\nexport default APIClient","const Storage = (function() {\n    var loadSuccess = false\n    const npcPath = \"npcs.json\"\n    const doLogs = false\n\n    function Log(...args) {\n        if (doLogs) {\n            console.log(...args)\n        }\n    }\n\n    let npcList = null\n    let npcData = null\n\n    function AssertLoaded() {\n        if (!loadSuccess) {\n            throw Error(\"Not loaded!\")\n        }\n    }\n\n    return {\n        LoadData: function() {\n            if (loadSuccess) {\n                return\n            }\n\n            const promise = fetch(npcPath, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(resp => {\n                return resp.json()\n            }).then((res) => { \n                Log(\"NPC file\")\n                Log(res)\n\n                npcList = res[\"list\"]\n                npcData = res[\"npcs\"]\n\n                loadSuccess = true\n            })\n    \n            return promise\n        },\n\n        NPCList: function() {\n            AssertLoaded()\n            const result = npcList\n\n            if (!result) {\n                throw Error(\"Couldn't load character list\")\n            }\n\n            return result\n        },\n\n        GetNPC: function(name) {\n            AssertLoaded()\n            const result = npcData[name]\n\n            if (!result) {\n                throw Error(\"Couldn't find character '\" + name + \"'\")\n            }\n            return result\n        }\n    }\n})()\n\nexport default Storage","import React from 'react';\nimport APIClient from './APIClient.js'\nimport Storage from './Storage.js'\n\nimport './Panel.css';\nimport './Figma.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.bindHandlers()\n    this.state = this.getInitialState()\n    this.api_lock = false\n\n    this.descriptionLock = false\n    this.messagesEndRef = React.createRef()\n  }\n\n  bindHandlers() {\n    this.changeCharacterHandler = this.changeCharacterHandler.bind(this)\n    this.changeMoodHandler = this.changeMoodHandler.bind(this)\n    this.triggerPresetEvent = this.triggerPresetEvent.bind(this)\n    this.textInputHandler = this.textInputHandler.bind(this)\n    this.triggerCustomEvent = this.triggerCustomEvent.bind(this)\n    this.triggerEventHandler = this.triggerEventHandler.bind(this)\n    this.sendHandler = this.sendHandler.bind(this)\n    this.resetHandler = this.resetHandler.bind(this)\n    this.flowersEventHandler = this.flowersEventHandler.bind(this)\n    this.carCrashEventHandler = this.carCrashEventHandler.bind(this)\n    this.disrespectEventHandler = this.disrespectEventHandler.bind(this)\n    this.changeCharacter = this.changeCharacter.bind(this)\n    this.entryToBubble = this.entryToBubble.bind(this)\n  }\n\n  scrollToBottom() {\n    this.messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  getInitialState() {\n    return {\n      id: APIClient.GetUserSession(),\n      CharDesc: \"\",\n      CharName: \"\",\n      CharStartLine: \"\",\n      CharMood: \"neutral\",\n      PlayerName: \"You\",\n      PlayerDesc: \"\",\n      ChatInput: \"\",\n      EventDescInput: \"\",\n      EventReaction: \"none\",\n      ChatHistory: [],\n      CharChanged: true,\n      PlayerChanged: true,\n      MoodChanged: false\n    }\n  }\n\n  notifySavedChanges() {\n    this.setState({\n      CharChanged: false,\n      PlayerChanged: false,\n      MoodChanged: false\n    })\n  }\n\n  emptyCharacteristics() {\n    return this.state.CharName === \"\" || this.state.PlayerName === \"\" || this.state.CharDesc === \"\" || this.state.ChatInput === \"\"\n  }\n\n  setCharByName(name) {\n    this.descriptionLock = false\n    let data = Storage.GetNPC(name)\n    this.setChar(data.name, data.description, data.line)\n  }\n\n  setChar(name, desc, line) {\n    this.setState(prev_state => {      \n      return {\n        CharDesc: desc,\n        CharName: name,\n        CharStartLine: line,\n        ChatChrono: desc + \"\\n\" + name + \": \\\"\" +  line + \"\\\"\",\n        ChatHistory: [],\n        CharChanged: true\n      }\n    })\n  }\n\n  setBlankCharacter(event) {\n    this.setState(this.getInitialState())\n  }\n\n  changeCharacterHandler = (event) => {\n    this.changeCharacter(event.target.id, event)\n  }\n\n  changeCharacter = (char, event) => {\n    event.preventDefault()\n    var x = char\n    switch (x) {\n      case 'TrevorButton':\n        this.setCharByName(\"trevor\")\n        break\n      case 'LandaButton':\n        this.setCharByName(\"landa\")\n        break\n      case 'CourtneyButton':\n        this.setCharByName(\"courtney\")\n        break\n      case 'CustomButton':\n        this.setBlankCharacter()\n        break\n      default: \n        console.error(\"Error in changeCharacterHandler\")\n    }\n  }\n\n  changeMoodHandler(new_mood, event) {\n    event.preventDefault()\n\n    console.log(new_mood);\n    this.changeMood(new_mood)\n\n    this.setState({\n      MoodChanged: true\n    })\n  }\n\n  async triggerPresetEvent(x) {\n    console.log(x)\n\n    let preset_events = {\n      FlowersEvent: {\n        desc: this.state.PlayerName + \" just gave flowers to \" + this.state.CharName,\n        attitude: \"pleased\"\n      },\n\n      CarCrashEvent: {\n        desc: \"A car had just crashed near \" + this.state.CharName + \"!\",\n        attitude: \"scared\"\n      },\n\n      DisrespectEvent: {\n        desc: this.state.PlayerName + \" had shown disrespect towards \" + this.state.CharName,\n        attitude: \"angry\"\n      }\n    }\n\n    const {desc, attitude} = preset_events[x]\n\n    await this.triggerEvent(desc, attitude)\n  }\n\n  flowersEventHandler(event) {\n    event.preventDefault()\n    this.triggerPresetEvent(\"FlowersEvent\")\n  }\n\n  disrespectEventHandler(event) {\n    event.preventDefault()\n    this.triggerPresetEvent(\"DisrespectEvent\")\n  }\n\n  carCrashEventHandler(event) {\n    event.preventDefault()\n    this.triggerPresetEvent(\"CarCrashEvent\")\n  }\n\n  textInputHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    var v = event.target.value\n    switch (x) {\n      case 'CharName':\n      case 'CharStartLine':\n      case 'CharDesc':\n        this.setState({\n          CharChanged: true\n        })\n        break\n      case 'PlayerName':\n      case 'PlayerDesc':\n        this.setState({\n          PlayerChanged: true\n        })\n        break\n      case 'EventDescInput':\n      case 'ChatInput':\n        break\n      default:\n        console.error(\"Error in textInputHandler\")\n        return\n    }\n\n    console.log(x, v)\n\n    this.setState({[x]: v})\n  }\n\n  changeEventReaction = e => {\n    e.preventDefault()\n    var v = e.target.value\n    console.log(v)\n    this.setState({EventReaction: v})\n  }\n\n  async triggerCustomEvent(event) {\n    event.preventDefault()\n\n    if (this.state.EventReaction == \"none\") {\n      console.error(\"No reaction set\")\n      return\n    }\n\n    console.log(\"custom event\")\n\n    await this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n\n    this.setState({\n      EventDescInput: \"Describe event here\",\n      EventReaction: \"none\",\n    })\n  }\n\n  displayWithNewlines(text) {\n    return text.split(\"\\n\").map((i,key) => {\n      return <div key={key}>{i}</div>;\n    })\n  }\n\n  clearChatInput() {\n    this.setState({ ChatInput: \"\" })\n  }\n\n  renderChatEntry(entry) {\n    var result = \"\"\n\n    if (entry.type === \"notification\") {\n      result = entry.text + \"\\n\"\n    } else if (entry.type === \"message\") {\n      var from = \"\"\n      if (entry.from === \"user\") {\n        from = this.state.PlayerName\n      } else if (entry.from === \"char\") {\n        from = this.state.CharName\n      } else {\n        console.error(\"Couldn't resolve line source: \")\n        console.error(entry)\n        console.error(\"-----------------------------\")\n      }\n      result = from + \": \\\"\" + entry.text + \"\\\".\\n\"\n    } else {\n      console.error(\"Wrong entry type\")\n    }\n\n    return result\n  }\n\n  createChatEntry(text, type, from) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: text,\n        type: type,\n        from: from\n      }])\n\n      return { ChatHistory: new_history }\n    })\n  }\n\n  parseReply(reply, from) {\n    this.createChatEntry(reply, \"message\", from)\n  }\n\n  parseEvent(desc, attitude) {\n    this.createChatEntry(desc, \"notification\", \"char\")\n  }\n\n  async triggerEventHandler(event) {\n    event.preventDefault()\n\n    const reply = await this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n    this.parseReply(reply)\n  }\n\n  async triggerEvent(desc, attitude) {\n    console.log(\"Triggering event\")\n\n    this.parseEvent(desc, attitude)\n\n    let requests = this.createPreliminaryRequests()\n    requests.push(APIClient.TriggerEvent(desc, attitude))\n\n    let reply = await APIClient.SendRequests(this.state.id, requests)\n\n    this.parseReply(reply, \"char\")\n    this.notifySavedChanges()\n  }\n\n  async GetReplyFromCharacter(text, name) {\n    try {\n      let reply = await APIClient.GetReplyFromCharacter(this.state.id, text, name)\n      return reply\n    } catch (e) {\n      console.error(e)\n    }\n\n    return null\n  }\n\n  getPlayerMessage() {\n    return this.state.ChatInput\n  }\n\n  notifyNewMood(new_mood) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: prevState.CharName + \"'s mood changed to \" + new_mood,\n        type: \"notification\"\n      }])\n\n      return { \n        CharMood: new_mood,\n        ChatHistory: new_history \n      }\n    })\n  }\n  \n  async changeMood(new_mood) {\n    let result = null\n\n    try {\n      result = await APIClient.ChangeMood(this.state.id, new_mood)\n    } catch (e) {\n      console.error(\"changeMood: error in APIClient.ChangeMood: \", e)\n      result = null\n    }\n\n    return result\n  }\n\n  async resetHandler(event) {\n    console.log(\"Resetting...\")\n    try {\n      await APIClient.Reset(this.state.id)\n\n      this.setState({\n        ChatHistory: []\n      })\n    } catch (e) {\n      console.error(\"changeMood: error in APIClient.Reset: \", e)\n    }\n  }\n\n  createPreliminaryRequests() {\n    let messages = []\n    if (this.state.CharChanged) {\n      messages.push(APIClient.EditCharacter(this.state.CharName, this.state.CharDesc, this.state.CharStartLine))\n    }\n\n    if (this.state.PlayerChanged) {\n      messages.push(APIClient.EditPlayer(this.state.PlayerName, this.state.PlayerDesc))\n    }\n\n    if (this.state.MoodChanged) {\n      messages.push(APIClient.ChangeMood(this.state.CharMood))\n    }\n\n    return messages\n  }\n\n  async sendHandler(event) {\n    event.preventDefault()\n\n    if (this.emptyCharacteristics()) {\n      console.error(\"Empty characteristics, couldn't send messages\")\n      return\n    }\n\n    let messages = this.createPreliminaryRequests()\n\n    const text = this.getPlayerMessage()\n    let message = text\n    this.clearChatInput()\n    this.parseReply(message, \"user\")\n\n    messages.push(APIClient.RequestReply(text))\n\n    let reply = await APIClient.SendRequests(this.state.id, messages)\n\n    if (!reply) {\n      console.error(\"Failed to get reply\")\n      return\n    }\n\n    // NPC reply\n    this.parseReply(reply, \"char\")\n\n    this.api_lock = false\n    this.descriptionLock = true\n\n    this.notifySavedChanges()\n    this.scrollToBottom()\n  }\n\n  chatHistory() {\n    return this.state.CharDesc + \"\\n\" + this.state.PlayerDesc + \"\\n\" + this.state.CharName + \": \" + this.state.CharStartLine + \".\\n\" + this.state.ChatHistory.map(elem => { return this.renderChatEntry(elem) }).join(\"\\n\")\n  }\n\n  renderChatHistory() {\n    if (this.state.CharDesc) {\n      return this.displayWithNewlines(this.chatHistory())\n    }\n    return \"\"\n  }\n\n  renderOld() {\n    <table id=\"demo-window\"><tbody>\n        {/* Character selections */}\n        <tr>\n          <td colSpan=\"3\" className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Select NPC character</h2>\n              <div>\n                <button id=\"TrevorButton\" onClick={this.changeCharacterHandler}>Trevor</button>\n                <button id=\"LandaButton\" onClick={this.changeCharacterHandler}>Hans Landa</button>\n                <button id=\"CourtneyButton\" onClick={this.changeCharacterHandler}>Courtney Williams</button>\n                <button id=\"CustomButton\" onClick={this.changeCharacterHandler}>Custom...</button>\n              </div>\n            </div>\n          </td>\n        </tr>\n\n        {/* Events & mood */}\n        <tr>\n          {/* Mood */}\n          <td className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Moods</h2>\n              <table><tbody>\n                <tr><td><button id=\"NeutralMoodButton\" onClick={this.changeMoodHandler}>Neutral</button></td></tr>\n                <tr><td><button id=\"JoyMoodButton\" onClick={this.changeMoodHandler}>Joy</button></td></tr>\n                <tr><td><button id=\"EnvyMoodButton\" onClick={this.changeMoodHandler}>Envy</button></td></tr>\n                <tr><td><button id=\"FearMoodButton\" onClick={this.changeMoodHandler}>Fear</button></td></tr>\n              </tbody></table>\n            </div>\n          </td>\n\n          {/* Chat */}\n          <td className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Chat</h2>\n              <table className=\"chat-window\"><tbody>\n                {/* Chat window */}\n                <tr>\n                  <td colSpan=\"3\"><div className=\"dialogue-window\">\n                    {this.renderChatHistory()}\n                  </div></td>\n                </tr>\n                <tr>\n                  <td colSpan=\"2\"><input id=\"ChatInput\" onChange={this.textInputHandler} value={this.state.ChatInput} placeholder=\"Type here\"></input></td>\n                  <td><button onClick={this.sendHandler}>Reply</button></td>\n                </tr>\n              </tbody></table>\n            </div>\n          </td>\n\n          {/* Events */}\n          <td className=\"large-cell\">\n            <div className=\"menu-spacer\"><table><tbody>\n              <tr>\n                <td colSpan=\"3\"><h2>Trigger game event</h2></td>\n              </tr>\n              <tr>\n                <td colSpan=\"2\" rowSpan=\"2\"><textarea id=\"EventDescInput\" onChange={this.textInputHandler} value={this.state.EventDescInput}></textarea></td>\n                <td><select onChange={this.changeEventReaction} value={this.state.EventReaction}>\n                  <option value=\"none\">It made them:</option>\n                  <option value=\"angry\">Angry</option>\n                  <option value=\"pleased\">Pleased</option>\n                  <option value=\"scared\">Scared</option>\n                  <option value=\"neutral\">Neutral</option>\n                </select></td>\n              </tr>\n              <tr>\n                <td><button onClick={this.triggerCustomEvent}>Go</button></td>\n              </tr>\n              <tr>\n                <td colSpan=\"3\"><h2>Preset events</h2></td>\n              </tr>\n              <tr>\n                <td><button id=\"FlowersEvent\" onClick={this.presetEventHandler}>Receives flowers</button></td>\n                <td><button id=\"DisrespectEvent\" onClick={this.presetEventHandler}>Show disrespect</button></td>\n                <td><button id=\"CarCrashEvent\" onClick={this.presetEventHandler}>The car crashes nearby</button></td>\n              </tr>\n            </tbody></table></div>\n          </td>\n        </tr>\n\n        {/* Describe character | description */}\n        <tr>\n            <td colSpan=\"3\" className=\"large-cell\">\n              <div className=\"menu-spacer\">\n                <h2>Describe character</h2>\n                <table><tbody>\n                  <tr>\n                    <td>\n                      <div>Name</div>\n                      <input id=\"CharName\" onChange={this.textInputHandler} value={this.state['CharName']} placeholder=\"Name...\"></input>\n                    </td>\n                    <td rowSpan=\"2\">\n                      <div>Description</div>\n                      <textarea id=\"CharDesc\" onChange={this.textInputHandler} value={this.state.CharDesc}></textarea>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <div>Starting line</div>\n                      <textarea id=\"CharStartLine\" onChange={this.textInputHandler} value={this.state.CharStartLine} placeholder=\"Type starting line here...\"></textarea>\n                    </td>\n                  </tr>\n                </tbody></table>\n              </div>\n            </td>\n        </tr>\n\n        {/* Player */}\n        <tr>\n          <td colSpan=\"3\" className=\"large-cell\">\n            <div className=\"menu-spacer\">\n              <h2>Player's description</h2>\n\n              <h3>Name</h3>\n              <div className=\"menu-input\">\n                <div><input id=\"PlayerName\" onChange={this.textInputHandler} value={this.state.PlayerName} placeholder=\"Your name...\"></input></div>\n              </div>\n\n              <h3>Description (optional)</h3>\n              <div className=\"menu-input\">\n                <div><textarea id=\"PlayerDesc\" onChange={this.textInputHandler} value={this.state.PlayerDesc}></textarea></div>\n              </div>\n            </div>\n          </td>\n        </tr>\n      </tbody></table>\n  }\n\n  entryToBubble(e) {\n    if (e.type === \"message\") {\n      if (e.from === \"char\") {\n        return (\n          <div className=\"chat-bubble-container left-float\">\n            <div className=\"chat-bubble\">\n              {e.text}\n            </div>\n            <br/>\n            <div className=\"bubble-annot left-float\">{this.state.CharName}</div>\n          </div>\n        )\n      } else if (e.from === \"user\") {\n        return (\n          <div className=\"chat-bubble-container right-float\">\n            <div className=\"chat-bubble\">\n              {e.text}\n            </div>\n            <br/>\n            <div className=\"bubble-annot right-float\">{this.state.PlayerName}</div>\n          </div>\n        )\n      } else {\n        console.error(\"wrong message source\")\n      }\n    } else if (e.type === \"notification\") {\n      return (\n        <div>\n          <div className=\"narrative-block left-float\">\n            {e.text}\n          </div>\n        </div>\n      )\n    } else {\n      console.error(\"wrong message type\")\n    }\n  }\n\n  startingLineBubble() {\n    if (this.state.CharStartLine) {\n      return (\n        <div className=\"chat-bubble-container left-float\">\n          <div className=\"chat-bubble\">\n            {this.state.CharStartLine}\n          </div>\n          <br/>\n          <div className=\"bubble-annot left-float\">{this.state.CharName}</div>\n        </div>\n      )\n    }\n  }\n\n  dialogueBubbles() {\n    if (this.state.CharDesc) {\n      return (\n        <div>\n          <div className=\"narrative-block\">\n            {this.state.CharDesc}\n          </div>\n\n          <br/>\n\n          {this.startingLineBubble()}\n\n          {this.state.ChatHistory.map(this.entryToBubble)}\n        </div>\n      )\n    }\n    return \"\"\n  }\n\n  render() {\n    return (\n      <div className=\"v8_10\">\n        <div className=\"v8_1\">\n          <div className=\"v6_67\"></div>\n          <button className=\"v23_24\" onClick={this.triggerCustomEvent}>\n            <span className=\"v23_26\">Go</span>\n          </button>\n          <select className=\"v23_27\" onChange={this.changeEventReaction} value={this.state.EventReaction}>\n            <option value=\"none\">It made them:</option>\n            <option value=\"angry\">Angry</option>\n            <option value=\"pleased\">Pleased</option>\n            <option value=\"scared\">Scared</option>\n            <option value=\"neutral\">Neutral</option>\n          </select>\n          <button className=\"v23_2\" onClick={this.carCrashEventHandler}>\n            <span className=\"v23_4\">Car crashes nearby</span>\n          </button>\n          <button className=\"v23_5\" onClick={this.flowersEventHandler}>\n            <span className=\"v23_7\">Receives flowers</span>\n          </button>\n          <button className=\"v23_19\" onClick={this.disrespectEventHandler}>\n            <span className=\"v23_21\">Show disrespect</span>\n          </button>\n          <span className=\"v6_68\">Events</span>\n          <span className=\"v6_71\">Preset events</span>\n          <span className=\"v6_72\">Trigger custom event</span>\n          <textarea className=\"v23_31\" placeholder=\"Describe...\" id=\"EventDescInput\" value={this.state.EventDescInput} onChange={this.textInputHandler}>\n          </textarea>\n        </div>\n        <div className=\"v8_2\">\n          <div className=\"v6_69\"></div>\n          <span className=\"v23_45\">Starting line</span>\n          <span className=\"v23_44\">Description</span>\n          <textarea className=\"v23_35\" placeholder=\"Describe...\" id=\"CharDesc\" value={this.state.CharDesc} onChange={this.textInputHandler}>\n          </textarea>\n          <span className=\"v23_49\">Description</span>\n          <textarea className=\"v23_50\" placeholder=\"Describe...\" id=\"PlayerDesc\" value={this.state.PlayerDesc} onChange={this.textInputHandler}>\n          </textarea>\n          <input className=\"v23_41\" placeholder=\"Name\" id=\"CharName\" value={this.state.CharName} onChange={this.textInputHandler}>\n          </input>\n          <input className=\"v23_46\" placeholder=\"Name\" id=\"PlayerName\" value={this.state.PlayerName} onChange={this.textInputHandler}>\n          </input>\n          <textarea className=\"v23_38\" placeholder=\"Type here...\" id=\"CharStartLine\" value={this.state.CharStartLine} onChange={this.textInputHandler}>\n          </textarea>\n          <span className=\"v6_73\">NPC</span>\n          <span className=\"v6_74\">Player</span>\n          <span className=\"v6_70\">Characteristics</span>\n        </div>\n        <div className=\"v8_9\">\n          <div className=\"v6_53\"></div>\n          <div className=\"v8_7\">\n            <span className=\"v6_54\">Change the mood here</span>\n            <button className=\"v6_55\" id=\"EnvyMoodButton\" onClick={e => this.changeMoodHandler(\"envy\", e)}>\n              <span className=\"v6_57\">Envy</span>\n            </button>\n            <button className=\"v6_58\" id=\"JoyMoodButton\" onClick={e => this.changeMoodHandler(\"joy\", e)}>\n              <span className=\"v6_60\">Joy</span>\n            </button>\n            <button className=\"v6_61\" id=\"NeutralMoodButton\" onClick={e => this.changeMoodHandler(\"neutral\", e)}>\n              <span className=\"v6_63\">Neutral</span>\n            </button>\n          </div>\n          <button className=\"v6_64\" id=\"FearMoodButton\" onClick={e => this.changeMoodHandler(\"fear\", e)}>\n            <span className=\"v6_66\">Fear</span>\n          </button>\n        </div>\n        <div className=\"v8_8\">\n          <div className=\"v6_30\"></div>\n          <div className=\"v23_54\">\n            <span className=\"v6_31\">Select NPC</span>\n            <button className=\"v6_47\" id=\"TrevorButton\" onClick={e => this.changeCharacter(\"TrevorButton\", e)}>\n              <span className=\"v6_38\">Trevor</span>\n            </button>\n            <button className=\"v6_46\" id=\"CourtneyButton\" onClick={e => this.changeCharacter(\"CourtneyButton\", e)}>\n              <span className=\"v6_40\">Courtney</span>\n            </button>\n            <button className=\"v6_48\" id=\"LandaButton\" onClick={e => this.changeCharacter(\"LandaButton\", e)}>\n              <span className=\"v6_39\">Hans Landa</span>\n            </button>\n            <button className=\"v6_49\" id=\"CustomButton\" onClick={e => this.changeCharacter(\"CustomButton\", e)}>\n              <span className=\"v6_51\">Custom...</span>\n            </button>\n          </div>\n        </div>\n        <div className=\"v8_6\">\n          {/*\n          <div className=\"narrative-block left-float\">\n            Courtney is a hot bitchy girl. She has huge tits and round ass. She likes money and sex. Here is her direct messages with You\n          </div>\n\n          <div className=\"chat-bubble-container right-float\">\n            <div className=\"chat-bubble\">\n              Hi there sweetie\n            </div>\n            <br/>\n            <div className=\"bubble-annot right-float\">YOU</div>\n          </div>\n\n          <div className=\"chat-bubble-container left-float\">\n            <div className=\"chat-bubble\">\n              CHUMBA\n            </div>\n            <br/>\n            <div className=\"bubble-annot left-float\">Courtney</div>\n          </div>\n          */}\n\n          <div className=\"dialogue-container\">\n            {this.dialogueBubbles()}\n            <div ref={this.messagesEndRef}></div>\n          </div>\n          \n          \n\n          <textarea className=\"v8_5\" placeholder=\"Type here\" id=\"ChatInput\" value={this.state.ChatInput} onChange={this.textInputHandler}>\n          </textarea>\n          <button className=\"v8_4\" onClick={this.resetHandler}>\n            <span className=\"v6_41\">RESET</span>\n          </button>\n          <button className=\"v8_3\" onClick={this.sendHandler}>\n            <span className=\"v6_42\">REPLY</span>\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react'\n\nimport './LoadingAnimation.css'\n\nfunction LoadingAnimation() {\n    return (\n        <div className=\"loading-container\">\n            <span></span>\n            <span></span>\n            <span></span>\n        </div>\n    )\n}\n\nexport default LoadingAnimation;","import React from 'react';\nimport APIClient from './APIClient'\nimport Storage from './Storage'\n\nimport './App.css';\nimport Panel from './Panel.js'\nimport LoadingAnimation from './Decorations/LoadingAnimation.js'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = this.initState()\n    }\n\n    initState() {\n        return {\n            loaded: false\n        }\n    }\n\n    componentDidMount() {\n        this.initFetch()\n    }\n\n    initFetch() {\n        const content = Storage.LoadData()\n        const session = APIClient.CreateUserSession()\n\n        Promise.all([content, session]).then(values => {\n            this.setState({\n                loaded: true\n            })\n        })\n    }\n\n    loaded() {\n        return this.state.loaded\n    }\n\n    render() {\n        if (!this.loaded()) {\n            return <LoadingAnimation/>\n        }\n\n        return <Panel/>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('body-container')\n);\n\n\n"],"sourceRoot":""}