{"version":3,"sources":["APIClient.js","Storage.js","Panel.js","Decorations/LoadingAnimation.js","App.js","index.js"],"names":["Fetch","url","init","headers","fetch","APIRequest","method","id","params","a","body","JSON","stringify","http_response","ok","Error","json","json_response","result","status","APIClient","sessionId","undefined","NewCharacter","desc","ChangeMood","new_mood","mood","TriggerEvent","event_desc","attitude","GetReplyFromCharacter","user_message","user_name","CreateUserSession","GetUserSession","Storage","loadSuccess","npcList","npcData","AssertLoaded","LoadData","then","resp","res","NPCList","GetNPC","name","App","props","changeCharacterHandler","event","preventDefault","target","setCharByName","setBlankCharacter","console","error","changeMoodHandler","x","log","changeMood","presetEventHandler","textInputHandler","v","value","descriptionLock","setState","changeEventReaction","e","EventReaction","bindHandlers","state","getInitialState","api_lock","this","bind","triggerCustomEvent","triggerEventHandler","sendHandler","CharDesc","CharName","CharStartLine","CharMood","PlayerName","PlayerDesc","ChatInput","EventDescInput","ChatHistory","data","setChar","description","line","ChatChrono","triggerEvent","text","split","map","i","key","entry","type","from","prevState","concat","reply","createChatEntry","parseReply","parseEvent","getPlayerMessage","message","clearChatInput","elem","renderChatEntry","join","displayWithNewlines","chatHistory","colSpan","onClick","className","renderChatHistory","onChange","placeholder","rowSpan","React","Component","LoadingAnimation","initState","loaded","initFetch","content","session","Promise","all","values","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1681b0f1.chunk.js","sourcesContent":["const baseUrl = \"https://r4xp4nhmja.execute-api.eu-west-2.amazonaws.com/default\";\n\nconst DoLogs = false\n\nfunction Log(...args) {\n    if (DoLogs) {\n        console.log(...args)\n    }\n}\n\nconst Fetch = function(url, init) {\n    let headers\n\n    if (init) {\n        if (init.headers) {\n            headers = init.headers\n        } else {\n            headers = {}\n        }\n    } else {\n        headers = {}\n    }\n\n    Log(init)\n    Log(headers)\n\n    return fetch(`${baseUrl}${url}`, { ...init, headers })\n}\n\nconst APIRequest = async function(method, id, params) {\n    Log(id)\n    Log(method)\n    Log(params)\n\n    const http_response = await Fetch(\"\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"Application/json\"\n        },\n        body: JSON.stringify({ method, id, params })\n    })\n\n    if (!http_response.ok) {\n        throw Error(\"APIRequest: Couldn't get '\" + method + \"' response\")\n    }\n\n    const json_response = await http_response.json()\n\n    Log(\"Response:\", json_response)\n\n    const { result, status } = json_response\n\n    if (status !== \"ok\") {\n        throw Error(\"APIRequest: '\" + method + \"' request failed\")\n    }\n\n    return result\n}\n\nconst APIClient = (function() {\n    var sessionId = undefined\n\n    return {\n        NewCharacter: function(id, desc) {\n            let params = {desc: desc}\n            return APIRequest(\"new_character\", id, params)\n        },\n\n        ChangeMood: function(id, new_mood) {\n            let params = {mood: new_mood}\n            return APIRequest(\"change_mood\", id, params)\n        },\n\n        TriggerEvent: function(id, event_desc, attitude) {\n            let params = {event_desc: event_desc, attitude: attitude}\n            return APIRequest(\"trigger_event\", id, params)\n        },\n\n        GetReplyFromCharacter: function(id, user_message, user_name) {\n            let params = {user_message: user_message, user_name: user_name}\n            return APIRequest(\"request_reply\", id, params)\n        },\n\n        CreateUserSession: async function() {\n            let params = {}\n            let result = await APIRequest(\"create_user_session\", params)\n\n            if (!result) {\n                throw Error(\"Loading session failed!\")\n            }\n\n            sessionId = result\n        },\n\n        GetUserSession: function() {\n            const id = sessionId\n\n            if (!id) {\n                throw Error(\"Has no session\")\n            }\n\n            return id\n        }\n    }\n})()\n\nexport default APIClient","const Storage = (function() {\n    var loadSuccess = false\n    const npcPath = \"npcs.json\"\n    const doLogs = false\n\n    function Log(...args) {\n        if (doLogs) {\n            console.log(...args)\n        }\n    }\n\n    let npcList = null\n    let npcData = null\n\n    function AssertLoaded() {\n        if (!loadSuccess) {\n            throw Error(\"Not loaded!\")\n        }\n    }\n\n    return {\n        LoadData: function() {\n            if (loadSuccess) {\n                return\n            }\n\n            const promise = fetch(npcPath, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(resp => {\n                return resp.json()\n            }).then((res) => { \n                Log(\"NPC file\")\n                Log(res)\n\n                npcList = res[\"list\"]\n                npcData = res[\"npcs\"]\n\n                loadSuccess = true\n            })\n    \n            return promise\n        },\n\n        NPCList: function() {\n            AssertLoaded()\n            const result = npcList\n\n            if (!result) {\n                throw Error(\"Couldn't load character list\")\n            }\n\n            return result\n        },\n\n        GetNPC: function(name) {\n            AssertLoaded()\n            const result = npcData[name]\n\n            if (!result) {\n                throw Error(\"Couldn't find character '\" + name + \"'\")\n            }\n            return result\n        }\n    }\n})()\n\nexport default Storage","import React from 'react';\nimport './Panel.css';\nimport APIClient from './APIClient.js'\nimport Storage from './Storage.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.bindHandlers()\n    this.state = this.getInitialState()\n    this.api_lock = false\n\n    this.descriptionLock = false\n  }\n\n  bindHandlers() {\n    this.changeCharacterHandler = this.changeCharacterHandler.bind(this)\n    this.changeMoodHandler = this.changeMoodHandler.bind(this)\n    this.presetEventHandler = this.presetEventHandler.bind(this)\n    this.textInputHandler = this.textInputHandler.bind(this)\n    this.triggerCustomEvent = this.triggerCustomEvent.bind(this)\n    this.triggerEventHandler = this.triggerEventHandler.bind(this)\n    this.sendHandler = this.sendHandler.bind(this)\n  }\n\n  getInitialState() {\n    return {\n      id: APIClient.GetUserSession(),\n      CharDesc: \"\",\n      CharName: \"\",\n      CharStartLine: \"\",\n      CharMood: \"\",\n      PlayerName: \"You\",\n      PlayerDesc: \"\",\n      ChatInput: \"\",\n      EventDescInput: \"Describe event here\",\n      EventReaction: \"none\",\n      ChatHistory: []\n    }\n  }\n\n  setCharByName(name) {\n    this.descriptionLock = false\n    let data = Storage.GetNPC(name)\n    this.setChar(data.name, data.description, data.line)\n  }\n\n  setChar(name, desc, line) {\n    this.setState({\n      CharDesc: desc,\n      CharName: name,\n      CharStartLine: line,\n      ChatChrono: desc + \"\\n\" + name + \": \\\"\" +  line + \"\\\"\"\n    })\n  }\n\n  setBlankCharacter(event) {\n    this.setState(this.getInitialState())\n  }\n\n  changeCharacterHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    switch (x) {\n      case 'TrevorButton':\n        this.setCharByName(\"trevor\")\n        break\n      case 'LandaButton':\n        this.setCharByName(\"landa\")\n        break\n      case 'CourtneyButton':\n        this.setCharByName(\"courtney\")\n        break\n      case 'CustomButton':\n        this.setBlankCharacter()\n        break\n      default: \n        console.error(\"Error in changeCharacterHandler\")\n    }\n  }\n\n  changeMood(new_mood) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: prevState.CharName + \"'s mood changed to \" + new_mood,\n        type: \"notification\"\n      }])\n\n      return { \n        CharMood: new_mood,\n        ChatHistory: new_history \n      }\n    })\n  }\n\n  changeMoodHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    console.log(x);\n    switch (x) {\n      case 'NeutralMoodButton':\n        this.changeMood(\"neutral\")\n        break\n      case 'JoyMoodButton':\n        this.changeMood(\"joy\")\n        break\n      case 'EnvyMoodButton':\n        this.changeMood(\"envy\")\n        break\n      case 'FearMoodButton':\n        this.changeMood(\"fear\")\n        break\n      default: \n        console.error(\"Error in changeMoodHandler\")\n    }\n  }\n\n  presetEventHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    switch (x) {\n      case 'FlowersEvent':\n      case 'CarCrashEvent':\n      case 'DisrespectEvent':\n        console.log(x);\n        break\n      default: \n        console.error(\"Error in presetEventHandler\")\n    }\n  }\n\n  textInputHandler = event => {\n    event.preventDefault()\n    var x = event.target.id\n    var v = event.target.value\n    switch (x) {\n      case 'CharName':\n      case 'CharStartLine':\n      case 'CharDesc':\n      case 'PlayerName':\n      case 'PlayerDesc':\n        if (this.descriptionLock) {\n          return\n        }\n        break\n      case 'EventDescInput':\n      case 'ChatInput':\n        break\n      default:\n        console.error(\"Error in textInputHandler\")\n    }\n\n    this.setState({[x]: v})\n  }\n\n  changeEventReaction = e => {\n    e.preventDefault()\n    var v = e.target.value\n    console.log(v)\n    this.setState({EventReaction: v})\n  }\n\n  triggerCustomEvent(event) {\n    event.preventDefault()\n    console.log(\"custom event\")\n\n    this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n\n    this.setState({\n      EventDescInput: \"Describe event here\",\n      EventReaction: \"none\",\n    })\n  }\n\n  displayWithNewlines(text) {\n    return text.split(\"\\n\").map((i,key) => {\n      return <div key={key}>{i}</div>;\n    })\n  }\n\n  clearChatInput() {\n    this.setState({ ChatInput: \"\" })\n  }\n\n  renderChatEntry(entry) {\n    var result = \"\"\n\n    if (entry.type === \"notification\") {\n      result = entry.text + \"\\n\"\n    } else if (entry.type === \"message\") {\n      var from = \"\"\n      if (entry.from === \"user\") {\n        from = this.state.PlayerName\n      } else if (entry.from === \"char\") {\n        from = this.state.CharName\n      } else {\n        console.error(\"Couldn't resolve line source: \")\n        console.error(entry)\n        console.error(\"-----------------------------\")\n      }\n      result = from + \": \\\"\" + entry.text + \"\\\".\\n\"\n    } else {\n      console.error(\"Wrong entry type\")\n    }\n\n    return result\n  }\n\n  createChatEntry(text, type, from) {\n    this.setState((prevState) => {\n      const new_history = prevState.ChatHistory.concat([{\n        text: text,\n        type: type,\n        from: from\n      }])\n\n      return { ChatHistory: new_history }\n    })\n  }\n\n  parseReply(reply, from) {\n    this.createChatEntry(reply, \"message\", from)\n  }\n\n  parseEvent(reply) {\n    this.createChatEntry(reply, \"notification\", \"char\")\n  }\n\n  async triggerEventHandler(event) {\n    event.preventDefault()\n    // This is very very very very bad\n    if (this.api_lock) {\n      return\n    }\n    this.api_lock = true\n\n    const reply = await this.triggerEvent(this.state.EventDescInput, this.state.EventReaction)\n    this.parseReply(reply)\n\n    this.api_lock = false\n  }\n\n  async triggerEvent(desc, attitude) {\n    console.log(\"Triggering event\")\n\n    let character_reply = \"Something\"\n    // let character_reply = await APIClient.TriggerEvent(this.state.id, desc, attitude)\n\n    this.parseEvent(character_reply)\n\n    this.api_lock = false\n  }\n\n  async GetReplyFromCharacter(text, name) {\n    try {\n      let reply = await APIClient.GetReplyFromCharacter(this.state.id, text, name)\n      return reply\n    } catch (e) {\n      console.error(e)\n    }\n\n    return null\n  }\n\n  getPlayerMessage() {\n    return this.state.ChatInput\n  }\n\n  async changeMood(new_mood) {\n    let result = null\n\n    try {\n      result = await APIClient.ChangeMood(this.state.id, new_mood)\n    } catch (e) {\n      console.error(\"changeMood: error in APIClient.ChangeMood: \", e)\n      result = null\n    }\n\n    return result\n  }\n\n  async sendHandler(event) {\n    event.preventDefault()\n\n    // This is very very very very bad\n    if (this.api_lock) {\n      return\n    }\n    this.api_lock = true\n\n    let result = await this.changeMood(this.state.CharMood)\n    if (!result) {\n      console.error(\"Failed to change mood\")\n      return\n    }\n\n    let text = this.getPlayerMessage()\n    let reply = await this.GetReplyFromCharacter(text, this.state.PlayerName)\n\n    if (!reply) {\n      console.error(\"Failed to get reply\")\n      return\n    }\n\n    // Player's message\n    let message = text\n    this.clearChatInput()\n    this.parseReply(message, \"user\")\n\n    // NPC reply\n    this.parseReply(reply, \"char\")\n\n    this.api_lock = false\n    this.descriptionLock = true\n  }\n\n  chatHistory() {\n    return this.state.CharDesc + \"\\n\" + this.state.PlayerDesc + \"\\n\" + this.state.CharName + \": \" + this.state.CharStartLine + \".\\n\" + this.state.ChatHistory.map(elem => { return this.renderChatEntry(elem) }).join(\"\\n\")\n  }\n\n  renderChatHistory() {\n    if (this.state.CharDesc) {\n      return this.displayWithNewlines(this.chatHistory())\n    }\n    return \"\"\n  }\n\n  render() {\n    return (\n      <table id=\"demo-window\"><tbody>\n        {/* Character selections */}\n        <tr>\n          <td colSpan=\"3\">\n            Select NPC character\n            <div>\n              <button id=\"TrevorButton\" onClick={this.changeCharacterHandler}>Trevor</button>\n              <button id=\"LandaButton\" onClick={this.changeCharacterHandler}>Hans Landa</button>\n              <button id=\"CourtneyButton\" onClick={this.changeCharacterHandler}>Courtney Williams</button>\n              <button id=\"CustomButton\" onClick={this.changeCharacterHandler}>Custom...</button>\n            </div>\n          </td>\n        </tr>\n\n        {/* Events & mood */}\n        <tr>\n          <td>\n            <div className=\"menu-widget\">\n              Chat\n              <table className=\"chat-window\"><tbody>\n                {/* Chat window */}\n                <tr>\n                  <td colSpan=\"3\"><div className=\"dialogue-window\">\n                    {this.renderChatHistory()}\n                  </div></td>\n                </tr>\n                <tr>\n                  <td colSpan=\"2\"><input id=\"ChatInput\" onChange={this.textInputHandler} value={this.state.ChatInput} placeholder=\"Type here\"></input></td>\n                  <td><button onClick={this.sendHandler}>Reply</button></td>\n                </tr>\n              </tbody></table>\n            </div>\n          </td>\n          <td>\n            Moods\n            <table><tbody>\n              <tr><td><button id=\"NeutralMoodButton\" onClick={this.changeMoodHandler}>Neutral</button></td></tr>\n              <tr><td><button id=\"JoyMoodButton\" onClick={this.changeMoodHandler}>Joy</button></td></tr>\n              <tr><td><button id=\"EnvyMoodButton\" onClick={this.changeMoodHandler}>Envy</button></td></tr>\n              <tr><td><button id=\"FearMoodButton\" onClick={this.changeMoodHandler}>Fear</button></td></tr>\n            </tbody></table>\n          </td>\n          <td>\n            <div><table><tbody>\n              <tr>\n                <td colSpan=\"3\">Trigger game event</td>\n              </tr>\n              <tr>\n                <td colSpan=\"2\" rowSpan=\"2\"><textarea id=\"EventDescInput\" onChange={this.textInputHandler} value={this.state.EventDescInput}></textarea></td>\n                <td><select onChange={this.changeEventReaction} value={this.state.EventReaction}>\n                  <option value=\"none\">It made them:</option>\n                  <option value=\"angry\">Angry</option>\n                  <option value=\"pleased\">Pleased</option>\n                  <option value=\"scared\">Scared</option>\n                  <option value=\"neutral\">Neutral</option>\n                </select></td>\n              </tr>\n              <tr>\n                <td><button onClick={this.triggerCustomEvent}>Go</button></td>\n              </tr>\n              <tr>\n                <td colSpan=\"3\">Preset events</td>\n              </tr>\n              <tr>\n                <td><button id=\"FlowersEvent\" onClick={this.presetEventHandler}>Receives flowers</button></td>\n                <td><button id=\"DisrespectEvent\" onClick={this.presetEventHandler}>Show disrespect</button></td>\n                <td><button id=\"CarCrashEvent\" onClick={this.presetEventHandler}>The car crashes nearby</button></td>\n              </tr>\n            </tbody></table></div>\n          </td>\n        </tr>\n\n        {/* Describe character | description */}\n        <tr>\n          <td colSpan=\"3\">\n            Describe character\n            <table><tbody>\n              <tr>\n                <td>\n                  <div>Name</div>\n                  <input id=\"CharName\" onChange={this.textInputHandler} value={this.state['CharName']} placeholder=\"Name...\"></input>\n                </td>\n                <td rowSpan=\"2\">\n                  <div>Description</div>\n                  <textarea id=\"CharDesc\" onChange={this.textInputHandler} value={this.state.CharDesc}></textarea>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <div>Starting line</div>\n                  <textarea id=\"CharStartLine\" onChange={this.textInputHandler} value={this.state.CharStartLine} placeholder=\"Type starting line here...\"></textarea>\n                </td>\n              </tr>\n            </tbody></table>\n          </td>\n        </tr>\n\n        {/* Player */}\n        <tr>\n          <td colSpan=\"3\">\n            Player's description\n\n            Name\n            <div className=\"menu-input\">\n              <div><input id=\"PlayerName\" onChange={this.textInputHandler} value={this.state.PlayerName} placeholder=\"Your name...\"></input></div>\n            </div>\n\n            Description (optional)\n            <div className=\"menu-input\">\n              <div><textarea id=\"PlayerDesc\" onChange={this.textInputHandler} value={this.state.PlayerDesc}></textarea></div>\n            </div>\n          </td>\n        </tr>\n      </tbody></table>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\n\nimport './LoadingAnimation.css'\n\nfunction LoadingAnimation() {\n    return (\n        <div className=\"loading-container\">\n            <span></span>\n            <span></span>\n            <span></span>\n        </div>\n    )\n}\n\nexport default LoadingAnimation;","import React from 'react';\nimport APIClient from './APIClient'\nimport Storage from './Storage'\n\nimport './App.css';\nimport Panel from './Panel.js'\nimport LoadingAnimation from './Decorations/LoadingAnimation.js'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = this.initState()\n    }\n\n    initState() {\n        return {\n            loaded: false\n        }\n    }\n\n    componentDidMount() {\n        this.initFetch()\n    }\n\n    initFetch() {\n        const content = Storage.LoadData()\n        const session = APIClient.CreateUserSession()\n\n        Promise.all([content, session]).then(values => {\n            this.setState({\n                loaded: true\n            })\n        })\n    }\n\n    loaded() {\n        return this.state.loaded\n    }\n\n    render() {\n        if (!this.loaded()) {\n            return <LoadingAnimation/>\n        }\n\n        return <Panel/>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('body-container')\n);\n\n\n"],"sourceRoot":""}